Here are some notes to work with the GitHub commandline API:

Assuming you already have a GitHub account set up, then...

First, set up the ssh public key on GitHub. Test the SSH connection like so:

    % ssh git@github.com

You should see a message like:

    PTY allocation request failed on channel 0
    Hi aturvey! You've successfully authenticated, but GitHub does not provide shell access.
    Connection to github.com closed.

If not, there is some troubleshooting information on GitHub: https://goo.gl/uDSgNY

You can also use HTTPS, but beware that with 2FA enabled you'll need to have a Personal Access
Token defined (also described in the above link)

Here's how to cache your password with GitHub so that you don't need to use it every single
time. I guess this is analogous to ssh-agent for the session:

    https://goo.gl/hmaIj4

--------------------------------------

git keeps a branch locally that represents the last known state of the remote repo. that copy
is known as origin/master. It is a pointer to the last known remote commit on the master branch.

When local master gets out of sync with the remote, you can see it by

    % git status

You can also move forward the origin/master branch so that it is up to date with the repo but 
not merged with your local

    % git fetch origin master

Then you can look over the commits and do various diffs to investigate

    % git diff <whatever>
    % git log origin/master

Finally, you can merge origin/master into local master

    % git checkout master   ; don't forget about this
    % git merge master origin/master    ; resolve conficts, then add and commit

Or, you could have done all this in one go, like so

    % git pull origin master

When all done merging then push back up to repo

    $ git push origin master

